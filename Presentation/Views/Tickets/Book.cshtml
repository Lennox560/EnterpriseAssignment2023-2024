@model Presentation.Models.ViewModels.BookTicketViewModel

@{
    ViewData["Title"] = "Book";
}

<h1>Book</h1>

@if (TempData["message"] != null)
{
    <div class="alert alert-success" role="alert">
        @TempData["message"]
    </div>
}

@if (TempData["error"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["error"]
    </div>
}
<hr />
<div class="row">
    <div class="col-md-4">

        <form asp-action="Book" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            
            
            
            <div id="seatMap">
                <h2>Seat Selection</h2>
                <table id="seatTable">
                    <!-- Example: Generating a 5x5 grid -->
                    <tbody>
                        <!-- Loop to create rows -->
                        @for (int i = 1; i <= Model.Row; i++)
                        {
                            <tr>
                                <!-- Loop to create cells in each row -->
                                @for (int j = 1; j <= Model.Column; j++)
                                {
                                    
                                    <td class="seat" data-row="@i" data-column="@j">[ @i-@j ]</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="form-group">
                <label asp-for="Row" class="control-label"></label>
                <input asp-for="Row" class="form-control" readonly/>
                <span asp-validation-for="Row" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Column" class="control-label"></label>
                <input asp-for="Column" class="form-control" readonly/>
                <span asp-validation-for="Column" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="FlightId" class="control-label"></label>
                <input asp-for="FlightId" class="form-control" readonly/>
                <span asp-validation-for="FlightId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Passport" class="control-label"></label>
                <input asp-for="Passport" class="form-control" />
                <span asp-validation-for="Passport" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PricePaid" class="control-label"></label>
                <input asp-for="PricePaid" class="form-control" readonly/>
                <span asp-validation-for="PricePaid" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">Upload Passport Image</label>
                <input name="PassportImageFile" class="form-control" type="file" />
            </div>
            
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const seats = document.querySelectorAll("#seatTable .seat");
            const rowInput = document.getElementById("Row");
            const columnInput = document.getElementById("Column");

            // Set initial values to empty
            rowInput.value = "";
            columnInput.value = "";

            // Add event listener to each seat
            seats.forEach(function (seat) {
                seat.addEventListener("click", toggleSeatSelection);
            });

            function toggleSeatSelection() {
                // Reset color of all seats to black
                seats.forEach(function (seat) {
                    seat.classList.remove("selected");
                    seat.style.color = "";
                });

                // Set color of the selected seat to red
                this.classList.add("selected");
                this.style.color = "red";

                // Get row and column of the selected seat
                const row = this.dataset.row;
                const column = this.dataset.column;

                // Set the values in read-only inputs
                rowInput.value = row;
                columnInput.value = column;

                console.log("Selected seat:", row + "-" + column);
            }
        });
    </script>

    @if (!User.Identity.IsAuthenticated)
    {
        <script>
            window.onload = function () {
                var confirmation = confirm('Would you like to login first?');
                if (confirmation) {
                    window.location.href = "/Identity/Account/Login"; // Redirect to the login page
                }
            };
        </script>
    }
    
}
